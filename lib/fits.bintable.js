// Generated by CoffeeScript 1.3.3
(function() {
  var BinTable, Tabular,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tabular = require('fits.tabular');

  BinTable = (function(_super) {

    __extends(BinTable, _super);

    BinTable.dataTypePattern = /(\d*)([L|X|B|I|J|K|A|E|D|C|M])/;

    BinTable.arrayDescriptorPattern = /[0,1]*P([L|X|B|I|J|K|A|E|D|C|M])\((\d*)\)/;

    function BinTable(view, header) {
      var dataType, i, keyword, match, r, value, _i, _ref, _ref1,
        _this = this;
      BinTable.__super__.constructor.apply(this, arguments);
      for (i = _i = 1, _ref = this.cols; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        keyword = "TFORM" + i;
        value = header[keyword];
        match = value.match(BinTable.arrayDescriptorPattern);
        if (match != null) {
          (function() {
            var accessor, dataType;
            dataType = match[1];
            accessor = function() {
              var data, length, offset, _j;
              length = _this.view.getInt32();
              offset = _this.view.getInt32();
              _this.current = _this.view.tell();
              _this.view.seek(_this.begin + _this.tableLength + offset);
              data = [];
              for (i = _j = 1; 1 <= length ? _j <= length : _j >= length; i = 1 <= length ? ++_j : --_j) {
                data.push(BinTable.dataAccessors[dataType](_this.view));
              }
              _this.view.seek(_this.current);
              return data;
            };
            return _this.accessors.push(accessor);
          })();
        } else {
          match = value.match(BinTable.dataTypePattern);
          _ref1 = match.slice(1), r = _ref1[0], dataType = _ref1[1];
          r = r ? parseInt(r) : 0;
          if (r === 0) {
            (function() {
              var accessor;
              dataType = match[2];
              accessor = function(dt) {
                var data;
                data = BinTable.dataAccessors[dataType](_this.view);
                return data;
              };
              return _this.accessors.push(accessor);
            })();
          } else {
            (function() {
              var accessor;
              dataType = match[2];
              accessor = function() {
                var data, _j;
                data = [];
                for (i = _j = 1; 1 <= r ? _j <= r : _j >= r; i = 1 <= r ? ++_j : --_j) {
                  data.push(BinTable.dataAccessors[dataType](_this.view));
                }
                return data;
              };
              return _this.accessors.push(accessor);
            })();
          }
        }
      }
    }

    return BinTable;

  })(Tabular);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = BinTable;
  }

}).call(this);
