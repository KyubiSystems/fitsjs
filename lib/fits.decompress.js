// Generated by CoffeeScript 1.3.3
(function() {
  var FITS;

  FITS = this.FITS || require('fits');

  FITS.Decompress = {
    rice: function(array, arrayLen, blocksize, bytepix, pixels, nx) {
      var b, bbits, diff, fs, fsbits, fsmax, i, imax, k, lastpix, nbits, nonzeroCount, nzero, _ref;
      fsbits = 4;
      fsmax = 14;
      bbits = 1 << fsbits;
      _ref = this.riceSetup[bytepix](), fsbits = _ref[0], fsmax = _ref[1], lastpix = _ref[2];
      nonzeroCount = new Array(256);
      nzero = 8;
      k = 128;
      i = 255;
      while (i >= 0) {
        while (i >= k) {
          nonzeroCount[i] = nzero;
          i -= 1;
        }
        k = k / 2;
        nzero -= 1;
      }
      nonzeroCount[0] = 0;
      b = array.shift();
      nbits = 8;
      i = 0;
      while (i < nx) {
        nbits -= fsbits;
        while (nbits < 0) {
          b = (b << 8) | (array.shift());
          nbits += 8;
        }
        fs = (b >> nbits) - 1;
        b &= (1 << nbits) - 1;
        imax = i + blocksize;
        if (imax > nx) {
          imax = nx;
        }
        if (fs < 0) {
          while (i < imax) {
            array[i] = lastpix;
            i++;
          }
        } else if (fs === fsmax) {
          while (i < imax) {
            k = bbits - nbits;
            diff = b << k;
            k -= 8;
            while (k >= 0) {
              b = array.shift();
              diff |= b << k;
              k -= 8;
            }
            if (nbits > 0) {
              b = array.shift();
              diff |= b >> (-k);
              b &= (1 << nbits) - 1;
            } else {
              b = 0;
            }
            if ((diff & 1) === 0) {
              diff = diff >> 1;
            } else {
              diff = ~(diff >> 1);
            }
            array[i] = diff + lastpix;
            lastpix = array[i];
            i++;
          }
        } else {
          while (i < imax) {
            while (b === 0) {
              nbits += 8;
              b = array.shift();
            }
            nzero = nbits - nonzeroCount[b];
            nbits -= nzero + 1;
            b ^= 1 << nbits;
            nbits -= fs;
            while (nbits < 0) {
              b = (b << 8) | (array.shift());
              nbits += 8;
            }
            diff = (nzero << fs) | (b >> nbits);
            b &= (1 << nbits) - 1;
            if ((diff & 1) === 0) {
              diff = diff >> 1;
            } else {
              diff = ~(diff >> 1);
            }
            pixels[i] = diff + lastpix;
            lastpix = pixels[i];
            i++;
          }
        }
      }
      return pixels;
    },
    riceSetup: {
      1: function() {
        var fsbits, fsmax, lastpix;
        fsbits = 3;
        fsmax = 6;
        lastpix = array.shift();
        return [fsbits, fsmax, lastpix];
      },
      2: function() {
        var bytevalue, fsbits, fsmax, lastpix;
        fsbits = 4;
        fsmax = 14;
        lastpix = 0;
        bytevalue = array.shift();
        lastpix = lastpix | (bytevalue << 8);
        bytevalue = array.shift();
        lastpix = lastpix | bytevalue;
        return [fsbits, fsmax, lastpix];
      }
    },
    gzip: function(array, length) {
      throw "Not yet implemented";
    },
    plio: function(array, length) {
      throw "Not yet implemented";
    },
    hcompress: function(array, length) {
      throw "Not yet implemented";
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = FITS.Decompress;
  }

}).call(this);
