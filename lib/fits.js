// Generated by CoffeeScript 1.3.3
(function() {
  var BinTable, Data, Decompress, FITS, File, HDU, Header, Image, Module, Table;

  require('jDataView/src/jdataview');

  Module = require('module');

  Decompress = require('fits.decompress');

  Header = require('fits.header');

  Data = require('fits.data');

  Image = require('fits.image');

  BinTable = require('fits.bintable');

  Table = require('fits.table');

  HDU = (function() {

    function HDU(header, data) {
      this.header = header;
      this.data = data;
    }

    return HDU;

  })();

  File = (function() {

    File.LINEWIDTH = 80;

    File.BLOCKLENGTH = 2880;

    function File(buffer) {
      var data, hdu, header;
      this.length = buffer.byteLength;
      this.view = new jDataView(buffer, void 0, void 0, false);
      this.hdus = [];
      this.eof = false;
      while (true) {
        header = this.readHeader();
        data = this.readData(header);
        hdu = new HDU(header, data);
        this.hdus.push(hdu);
        if (this.eof) {
          break;
        }
      }
    }

    File.excessBytes = function(length) {
      return File.BLOCKLENGTH - length % File.BLOCKLENGTH;
    };

    File.prototype.readHeader = function() {
      var excess, header, line, linesRead;
      linesRead = 0;
      header = new Header();
      while (true) {
        line = this.view.getString(File.LINEWIDTH);
        linesRead += 1;
        header.readCard(line);
        if (line.slice(0, 4) === "END ") {
          break;
        }
      }
      excess = File.excessBytes(linesRead * File.LINEWIDTH);
      this.view.seek(this.view.tell() + excess);
      this.checkEOF();
      return header;
    };

    File.prototype.readData = function(header) {
      var data, excess;
      if (!header.hasDataUnit()) {
        return;
      }
      if (header.isPrimary()) {
        data = new Image(this.view, header);
      } else if (header.isExtension()) {
        if (header.extensionType === "BINTABLE") {
          data = new BinTable(this.view, header);
        } else if (header.extensionType === "TABLE") {
          data = new Table(this.view, header);
        }
      }
      excess = File.excessBytes(data.length);
      this.view.seek(this.view.tell() + data.length + excess);
      this.checkEOF();
      return data;
    };

    File.prototype.checkEOF = function() {
      if (this.view.tell() === this.length) {
        return this.eof = true;
      }
    };

    File.prototype.count = function() {
      return this.hdus.length;
    };

    return File;

  })();

  FITS = this.FITS = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = FITS;
  }

  FITS.version = '0.0.1';

  FITS.File = File;

}).call(this);
