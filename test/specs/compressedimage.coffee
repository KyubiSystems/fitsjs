window.FITS = astro.FITS

describe "FITS CompressedImage", ->

  it 'can read a FITS compressed image', ->
    precision = 6
    
    ready = false
    
    image = null
    pixels = null
    path = 'data/CFHTLS_03_g_sci.fits.fz'
    fits = new astro.FITS(path, (fits) ->
      image = fits.getDataUnit()
      image.getFrame(0, (arr) ->
        pixels = arr
        ready = true
      )
    )
    
    waitsFor ->
      return ready
    
    runs ->
      # NOTE: Difficult to test because there is no obvious control to 
      #       test against.  Was using DS9 and PyFITS, but these either
      #       overlook subtractive dithering or are not up-to-date to
      #       support the new ZDITHER0 keyword.  Testing against image
      #       uncompressed using funpack.
      image.getExtent(pixels)
      
      expect(image.min).toBeCloseTo(-2.935214, precision)
      expect(image.max).toBeCloseTo(1273.849121, precision)
      
      expect(image.getPixel(pixels, 0, 0)).toBeCloseTo(0.249601, precision)
      expect(image.getPixel(pixels, 400, 0)).toBeCloseTo(0.428947, precision)
      expect(image.getPixel(pixels, 400, 400)).toBeCloseTo(0.358678, precision)
      expect(image.getPixel(pixels, 0, 400)).toBeCloseTo(1.2917231, precision)
      
      # ... and a few other random pixels
      expect(image.getPixel(pixels, 33, 205)).toBeCloseTo(0.939594, precision)
      expect(image.getPixel(pixels, 44, 149)).toBeCloseTo(-0.728912, precision)
      expect(image.getPixel(pixels, 237, 377)).toBeCloseTo(-0.614697, precision)
      expect(image.getPixel(pixels, 393, 27)).toBeCloseTo(0.506017, precision)

  it 'can ready a (troublesome) FITS compressed image', ->
    precision = 6
    
    ready = false
    
    image = null
    pixels = null
    path = 'data/CFHTLS_082_0012_g.fits.fz'
    fits = new astro.FITS(path, (fits) ->
      image = fits.getDataUnit()
      image.getFrame(0, (arr) ->
        pixels = arr
        ready = true
      )
    )
    
    waitsFor ->
      return ready
    
    runs ->
      console.log fits
      image.getExtent(pixels)
      
      expect(image.min).toBeCloseTo(-106.448853, precision)
      expect(image.max).toBeCloseTo(793.284302, precision)

  it 'can ready a troublesome byte stream', ->
    ready = false
    
    # These bytes were spliced out of a compressed FITS image that is not
    # rendering correctly. The resulting image contains horizontal bands. This is due
    # to bytes stored in the heap of a binary table being incorrectly read when compared
    # to its C counterpart. These bytes were extracted and read in Python, resulting
    # in the same values as the C program. Something is wrong on the JavaScript side.
    
    # After running tests, JavaScript is reading these values just fine ...
    
    arr = null
    xhr = new XMLHttpRequest()
    xhr.open('GET', 'data/stream')
    xhr.responseType = 'arraybuffer'
    xhr.onload = ->
      arr = new Uint8Array(xhr.response)
      ready = true
    xhr.send()
    
    waitsFor ->
      return ready
    
    runs ->
      expect(arr[0]).toBe(0)
      expect(arr[1]).toBe(0)
      expect(arr[2]).toBe(1)
      expect(arr[3]).toBe(177)
      expect(arr[4]).toBe(14)
      expect(arr[5]).toBe(82)
      expect(arr[6]).toBe(36)
      expect(arr[7]).toBe(219)
      expect(arr[8]).toBe(60)
      expect(arr[9]).toBe(166)
      expect(arr[10]).toBe(217)
      expect(arr[11]).toBe(252)
      expect(arr[12]).toBe(41)
      expect(arr[13]).toBe(255)
      expect(arr[14]).toBe(151)
      expect(arr[15]).toBe(255)
      expect(arr[16]).toBe(250)
      expect(arr[17]).toBe(114)
      expect(arr[18]).toBe(194)
      expect(arr[19]).toBe(16)
      expect(arr[20]).toBe(140)
      expect(arr[21]).toBe(161)
      expect(arr[22]).toBe(8)
      expect(arr[23]).toBe(66)
      expect(arr[24]).toBe(52)
      expect(arr[25]).toBe(140)
      expect(arr[26]).toBe(33)
      expect(arr[27]).toBe(25)
      expect(arr[28]).toBe(70)
      expect(arr[29]).toBe(81)
      expect(arr[30]).toBe(0)
      expect(arr[31]).toBe(0)
      expect(arr[32]).toBe(0)
      expect(arr[33]).toBe(0)
      expect(arr[34]).toBe(0)
      expect(arr[35]).toBe(0)
      expect(arr[36]).toBe(110)
      expect(arr[37]).toBe(50)
      expect(arr[38]).toBe(132)
      expect(arr[39]).toBe(33)
      expect(arr[40]).toBe(8)
      expect(arr[41]).toBe(194)
      expect(arr[42]).toBe(80)
      expect(arr[43]).toBe(140)
      expect(arr[44]).toBe(13)
      expect(arr[45]).toBe(20)
      expect(arr[46]).toBe(16)
      expect(arr[47]).toBe(193)
      expect(arr[48]).toBe(4)
      expect(arr[49]).toBe(17)
      expect(arr[50]).toBe(65)
      expect(arr[51]).toBe(4)
      expect(arr[52]).toBe(49)
      expect(arr[53]).toBe(67)
      expect(arr[54]).toBe(4)
      expect(arr[55]).toBe(27)
      expect(arr[56]).toBe(28)
      expect(arr[57]).toBe(128)
      expect(arr[58]).toBe(0)
      expect(arr[59]).toBe(0)
      expect(arr[60]).toBe(88)
      expect(arr[61]).toBe(46)
      expect(arr[62]).toBe(67)
      expect(arr[63]).toBe(20)
      expect(arr[64]).toBe(251)
      expect(arr[65]).toBe(81)
      expect(arr[66]).toBe(12)
      expect(arr[67]).toBe(212)
      expect(arr[68]).toBe(209)
      expect(arr[69]).toBe(205)
      expect(arr[70]).toBe(16)
      expect(arr[71]).toBe(223)
      expect(arr[72]).toBe(129)
      expect(arr[73]).toBe(48)
      expect(arr[74]).toBe(132)
      expect(arr[75]).toBe(5)
      expect(arr[76]).toBe(148)
      expect(arr[77]).toBe(195)
      expect(arr[78]).toBe(244)
      expect(arr[79]).toBe(112)
      expect(arr[80]).toBe(146)
      expect(arr[81]).toBe(34)
      expect(arr[82]).toBe(88)
      expect(arr[83]).toBe(111)
      expect(arr[84]).toBe(244)
      expect(arr[85]).toBe(184)
      expect(arr[86]).toBe(160)
      expect(arr[87]).toBe(107)
      expect(arr[88]).toBe(34)
      expect(arr[89]).toBe(149)
      expect(arr[90]).toBe(49)
      expect(arr[91]).toBe(157)
      expect(arr[92]).toBe(54)
      expect(arr[93]).toBe(36)
      expect(arr[94]).toBe(156)
      expect(arr[95]).toBe(232)
      expect(arr[96]).toBe(214)
      expect(arr[97]).toBe(224)
      expect(arr[98]).toBe(87)
      expect(arr[99]).toBe(186)
      expect(arr[100]).toBe(77)
      expect(arr[101]).toBe(234)
      expect(arr[102]).toBe(72)
      expect(arr[103]).toBe(166)
      expect(arr[104]).toBe(158)
      expect(arr[105]).toBe(99)
      expect(arr[106]).toBe(185)
      expect(arr[107]).toBe(100)
      expect(arr[108]).toBe(136)
      expect(arr[109]).toBe(54)
      expect(arr[110]).toBe(44)
      expect(arr[111]).toBe(133)
      expect(arr[112]).toBe(162)
      expect(arr[113]).toBe(84)
      expect(arr[114]).toBe(146)
      expect(arr[115]).toBe(88)
      expect(arr[116]).toBe(135)
      expect(arr[117]).toBe(207)
      expect(arr[118]).toBe(152)
      expect(arr[119]).toBe(180)
      expect(arr[120]).toBe(249)
      expect(arr[121]).toBe(194)
      expect(arr[122]).toBe(194)
      expect(arr[123]).toBe(132)
      expect(arr[124]).toBe(132)
      expect(arr[125]).toBe(9)
      expect(arr[126]).toBe(65)
      expect(arr[127]).toBe(40)
      expect(arr[128]).toBe(66)
      expect(arr[129]).toBe(73)
      expect(arr[130]).toBe(188)
      expect(arr[131]).toBe(14)
      expect(arr[132]).toBe(37)
      expect(arr[133]).toBe(147)
      expect(arr[134]).toBe(37)
      expect(arr[135]).toBe(132)
      expect(arr[136]).toBe(119)
      expect(arr[137]).toBe(144)
      expect(arr[138]).toBe(177)
      expect(arr[139]).toBe(133)
      expect(arr[140]).toBe(160)
      expect(arr[141]).toBe(52)
      expect(arr[142]).toBe(83)
      expect(arr[143]).toBe(57)
      expect(arr[144]).toBe(48)
      expect(arr[145]).toBe(204)
      expect(arr[146]).toBe(81)
      expect(arr[147]).toBe(123)
      expect(arr[148]).toBe(237)
      expect(arr[149]).toBe(58)
      expect(arr[150]).toBe(151)
      expect(arr[151]).toBe(212)
      expect(arr[152]).toBe(157)
      expect(arr[153]).toBe(16)
      expect(arr[154]).toBe(243)
      expect(arr[155]).toBe(76)
      expect(arr[156]).toBe(34)
      expect(arr[157]).toBe(56)
      expect(arr[158]).toBe(242)
      expect(arr[159]).toBe(40)
      expect(arr[160]).toBe(166)
      expect(arr[161]).toBe(223)
      expect(arr[162]).toBe(40)
      expect(arr[163]).toBe(254)
      expect(arr[164]).toBe(252)
      expect(arr[165]).toBe(86)
      expect(arr[166]).toBe(230)
      expect(arr[167]).toBe(18)
      expect(arr[168]).toBe(130)
      expect(arr[169]).toBe(171)
      expect(arr[170]).toBe(60)
      expect(arr[171]).toBe(184)
      expect(arr[172]).toBe(43)
      expect(arr[173]).toBe(238)
      expect(arr[174]).toBe(156)
      expect(arr[175]).toBe(89)
      expect(arr[176]).toBe(218)
      expect(arr[177]).toBe(88)
      expect(arr[178]).toBe(130)
      expect(arr[179]).toBe(38)
      expect(arr[180]).toBe(69)
      expect(arr[181]).toBe(44)
      expect(arr[182]).toBe(104)
      expect(arr[183]).toBe(133)
      expect(arr[184]).toBe(194)
      expect(arr[185]).toBe(161)
      expect(arr[186]).toBe(104)
      expect(arr[187]).toBe(162)
      expect(arr[188]).toBe(137)
      expect(arr[189]).toBe(102)
      expect(arr[190]).toBe(189)
      expect(arr[191]).toBe(77)
      expect(arr[192]).toBe(227)
      expect(arr[193]).toBe(15)
      expect(arr[194]).toBe(84)
      expect(arr[195]).toBe(37)
      expect(arr[196]).toBe(227)
      expect(arr[197]).toBe(159)
      expect(arr[198]).toBe(136)
      expect(arr[199]).toBe(81)
      expect(arr[200]).toBe(11)
      expect(arr[201]).toBe(222)
      expect(arr[202]).toBe(25)
      expect(arr[203]).toBe(4)
      expect(arr[204]).toBe(202)
      expect(arr[205]).toBe(51)
      expect(arr[206]).toBe(94)
      expect(arr[207]).toBe(142)
      expect(arr[208]).toBe(75)
      expect(arr[209]).toBe(178)
      expect(arr[210]).toBe(19)
      expect(arr[211]).toBe(21)
      expect(arr[212]).toBe(211)
      expect(arr[213]).toBe(5)
      expect(arr[214]).toBe(41)
      expect(arr[215]).toBe(204)
      expect(arr[216]).toBe(2)
      expect(arr[217]).toBe(132)
      expect(arr[218]).toBe(14)
      expect(arr[219]).toBe(216)
      expect(arr[220]).toBe(34)
      expect(arr[221]).toBe(144)
      expect(arr[222]).toBe(54)
      expect(arr[223]).toBe(60)
      expect(arr[224]).toBe(27)
      expect(arr[225]).toBe(216)
      expect(arr[226]).toBe(92)
      expect(arr[227]).toBe(81)
      expect(arr[228]).toBe(103)
      expect(arr[229]).toBe(137)
      expect(arr[230]).toBe(90)
      expect(arr[231]).toBe(38)
      expect(arr[232]).toBe(222)
      expect(arr[233]).toBe(83)
      expect(arr[234]).toBe(9)
      expect(arr[235]).toBe(203)
      expect(arr[236]).toBe(170)
      expect(arr[237]).toBe(101)
      expect(arr[238]).toBe(167)
      expect(arr[239]).toBe(158)
      expect(arr[240]).toBe(161)
      expect(arr[241]).toBe(243)
      expect(arr[242]).toBe(168)
      expect(arr[243]).toBe(99)
      expect(arr[244]).toBe(57)
      expect(arr[245]).toBe(150)
      expect(arr[246]).toBe(216)
      expect(arr[247]).toBe(112)
      expect(arr[248]).toBe(212)
      expect(arr[249]).toBe(59)
      expect(arr[250]).toBe(12)
      expect(arr[251]).toBe(255)
      expect(arr[252]).toBe(8)
      expect(arr[253]).toBe(172)
      expect(arr[254]).toBe(82)
      expect(arr[255]).toBe(117)
      expect(arr[256]).toBe(56)
      expect(arr[257]).toBe(51)
      expect(arr[258]).toBe(209)
      expect(arr[259]).toBe(7)
      expect(arr[260]).toBe(176)
      expect(arr[261]).toBe(171)
      expect(arr[262]).toBe(141)
      expect(arr[263]).toBe(210)
      expect(arr[264]).toBe(160)
      expect(arr[265]).toBe(232)
      expect(arr[266]).toBe(19)
      expect(arr[267]).toBe(66)
      expect(arr[268]).toBe(228)
      expect(arr[269]).toBe(246)
      expect(arr[270]).toBe(136)
      expect(arr[271]).toBe(192)
      expect(arr[272]).toBe(224)
      expect(arr[273]).toBe(0)
      expect(arr[274]).toBe(0)
  
  it 'can read trouble some byte stream', ->
    ready = false
    
    image = null
    arr = null
    path = 'data/CFHTLS_082_0012_g.fits.fz'
    
    xhr = new XMLHttpRequest()
    xhr.open('GET', path)
    xhr.responseType = 'arraybuffer'
    xhr.onload = ->
      
      # Get slice
      start = 14400 + 10560
      end = 14400 + 10560 + 275
      
      # slice = xhr.response.slice(start, end)
      
      # Initialize array
      bytes = new Uint8Array(xhr.response)
      arr = bytes.subarray(start, end)
      console.log arr
      
      # arr = new Uint8Array(slice)
      ready = true
      
    xhr.send()
    
    # fits = new astro.FITS(path, (fits) ->
    #   image = fits.getDataUnit()
    #   
    #   # Slice the heap for the first row of uncompressed values
    #   start = 10560
    #   slice = image.buffer.slice(start, start + 275)
    #   
    #   # Initialize array
    #   arr = new Uint8Array(slice)
    #   console.log arr
    #   ready = true
    # )
    
    waitsFor ->
      return ready
    
    runs ->
      expect(arr[0]).toBe(0)
      expect(arr[1]).toBe(0)
      expect(arr[2]).toBe(1)
      expect(arr[3]).toBe(177)
      expect(arr[4]).toBe(14)
      expect(arr[5]).toBe(82)
      expect(arr[6]).toBe(36)
      expect(arr[7]).toBe(219)
      expect(arr[8]).toBe(60)
      expect(arr[9]).toBe(166)
      expect(arr[10]).toBe(217)
      expect(arr[11]).toBe(252)
      expect(arr[12]).toBe(41)
      expect(arr[13]).toBe(255)
      expect(arr[14]).toBe(151)
      expect(arr[15]).toBe(255)
      expect(arr[16]).toBe(250)
      expect(arr[17]).toBe(114)
      expect(arr[18]).toBe(194)
      expect(arr[19]).toBe(16)
      expect(arr[20]).toBe(140)
      expect(arr[21]).toBe(161)
      expect(arr[22]).toBe(8)
      expect(arr[23]).toBe(66)
      expect(arr[24]).toBe(52)
      expect(arr[25]).toBe(140)
      expect(arr[26]).toBe(33)
      expect(arr[27]).toBe(25)
      expect(arr[28]).toBe(70)
      expect(arr[29]).toBe(81)
      expect(arr[30]).toBe(0)
      expect(arr[31]).toBe(0)
      expect(arr[32]).toBe(0)
      expect(arr[33]).toBe(0)
      expect(arr[34]).toBe(0)
      expect(arr[35]).toBe(0)
      expect(arr[36]).toBe(110)
      expect(arr[37]).toBe(50)
      expect(arr[38]).toBe(132)
      expect(arr[39]).toBe(33)
      expect(arr[40]).toBe(8)
      expect(arr[41]).toBe(194)
      expect(arr[42]).toBe(80)
      expect(arr[43]).toBe(140)
      expect(arr[44]).toBe(13)
      expect(arr[45]).toBe(20)
      expect(arr[46]).toBe(16)
      expect(arr[47]).toBe(193)
      expect(arr[48]).toBe(4)
      expect(arr[49]).toBe(17)
      expect(arr[50]).toBe(65)
      expect(arr[51]).toBe(4)
      expect(arr[52]).toBe(49)
      expect(arr[53]).toBe(67)
      expect(arr[54]).toBe(4)
      expect(arr[55]).toBe(27)
      expect(arr[56]).toBe(28)
      expect(arr[57]).toBe(128)
      expect(arr[58]).toBe(0)
      expect(arr[59]).toBe(0)
      expect(arr[60]).toBe(88)
      expect(arr[61]).toBe(46)
      expect(arr[62]).toBe(67)
      expect(arr[63]).toBe(20)
      expect(arr[64]).toBe(251)
      expect(arr[65]).toBe(81)
      expect(arr[66]).toBe(12)
      expect(arr[67]).toBe(212)
      expect(arr[68]).toBe(209)
      expect(arr[69]).toBe(205)
      expect(arr[70]).toBe(16)
      expect(arr[71]).toBe(223)
      expect(arr[72]).toBe(129)
      expect(arr[73]).toBe(48)
      expect(arr[74]).toBe(132)
      expect(arr[75]).toBe(5)
      expect(arr[76]).toBe(148)
      expect(arr[77]).toBe(195)
      expect(arr[78]).toBe(244)
      expect(arr[79]).toBe(112)
      expect(arr[80]).toBe(146)
      expect(arr[81]).toBe(34)
      expect(arr[82]).toBe(88)
      expect(arr[83]).toBe(111)
      expect(arr[84]).toBe(244)
      expect(arr[85]).toBe(184)
      expect(arr[86]).toBe(160)
      expect(arr[87]).toBe(107)
      expect(arr[88]).toBe(34)
      expect(arr[89]).toBe(149)
      expect(arr[90]).toBe(49)
      expect(arr[91]).toBe(157)
      expect(arr[92]).toBe(54)
      expect(arr[93]).toBe(36)
      expect(arr[94]).toBe(156)
      expect(arr[95]).toBe(232)
      expect(arr[96]).toBe(214)
      expect(arr[97]).toBe(224)
      expect(arr[98]).toBe(87)
      expect(arr[99]).toBe(186)
      expect(arr[100]).toBe(77)
      expect(arr[101]).toBe(234)
      expect(arr[102]).toBe(72)
      expect(arr[103]).toBe(166)
      expect(arr[104]).toBe(158)
      expect(arr[105]).toBe(99)
      expect(arr[106]).toBe(185)
      expect(arr[107]).toBe(100)
      expect(arr[108]).toBe(136)
      expect(arr[109]).toBe(54)
      expect(arr[110]).toBe(44)
      expect(arr[111]).toBe(133)
      expect(arr[112]).toBe(162)
      expect(arr[113]).toBe(84)
      expect(arr[114]).toBe(146)
      expect(arr[115]).toBe(88)
      expect(arr[116]).toBe(135)
      expect(arr[117]).toBe(207)
      expect(arr[118]).toBe(152)
      expect(arr[119]).toBe(180)
      expect(arr[120]).toBe(249)
      expect(arr[121]).toBe(194)
      expect(arr[122]).toBe(194)
      expect(arr[123]).toBe(132)
      expect(arr[124]).toBe(132)
      expect(arr[125]).toBe(9)
      expect(arr[126]).toBe(65)
      expect(arr[127]).toBe(40)
      expect(arr[128]).toBe(66)
      expect(arr[129]).toBe(73)
      expect(arr[130]).toBe(188)
      expect(arr[131]).toBe(14)
      expect(arr[132]).toBe(37)
      expect(arr[133]).toBe(147)
      expect(arr[134]).toBe(37)
      expect(arr[135]).toBe(132)
      expect(arr[136]).toBe(119)
      expect(arr[137]).toBe(144)
      expect(arr[138]).toBe(177)
      expect(arr[139]).toBe(133)
      expect(arr[140]).toBe(160)
      expect(arr[141]).toBe(52)
      expect(arr[142]).toBe(83)
      expect(arr[143]).toBe(57)
      expect(arr[144]).toBe(48)
      expect(arr[145]).toBe(204)
      expect(arr[146]).toBe(81)
      expect(arr[147]).toBe(123)
      expect(arr[148]).toBe(237)
      expect(arr[149]).toBe(58)
      expect(arr[150]).toBe(151)
      expect(arr[151]).toBe(212)
      expect(arr[152]).toBe(157)
      expect(arr[153]).toBe(16)
      expect(arr[154]).toBe(243)
      expect(arr[155]).toBe(76)
      expect(arr[156]).toBe(34)
      expect(arr[157]).toBe(56)
      expect(arr[158]).toBe(242)
      expect(arr[159]).toBe(40)
      expect(arr[160]).toBe(166)
      expect(arr[161]).toBe(223)
      expect(arr[162]).toBe(40)
      expect(arr[163]).toBe(254)
      expect(arr[164]).toBe(252)
      expect(arr[165]).toBe(86)
      expect(arr[166]).toBe(230)
      expect(arr[167]).toBe(18)
      expect(arr[168]).toBe(130)
      expect(arr[169]).toBe(171)
      expect(arr[170]).toBe(60)
      expect(arr[171]).toBe(184)
      expect(arr[172]).toBe(43)
      expect(arr[173]).toBe(238)
      expect(arr[174]).toBe(156)
      expect(arr[175]).toBe(89)
      expect(arr[176]).toBe(218)
      expect(arr[177]).toBe(88)
      expect(arr[178]).toBe(130)
      expect(arr[179]).toBe(38)
      expect(arr[180]).toBe(69)
      expect(arr[181]).toBe(44)
      expect(arr[182]).toBe(104)
      expect(arr[183]).toBe(133)
      expect(arr[184]).toBe(194)
      expect(arr[185]).toBe(161)
      expect(arr[186]).toBe(104)
      expect(arr[187]).toBe(162)
      expect(arr[188]).toBe(137)
      expect(arr[189]).toBe(102)
      expect(arr[190]).toBe(189)
      expect(arr[191]).toBe(77)
      expect(arr[192]).toBe(227)
      expect(arr[193]).toBe(15)
      expect(arr[194]).toBe(84)
      expect(arr[195]).toBe(37)
      expect(arr[196]).toBe(227)
      expect(arr[197]).toBe(159)
      expect(arr[198]).toBe(136)
      expect(arr[199]).toBe(81)
      expect(arr[200]).toBe(11)
      expect(arr[201]).toBe(222)
      expect(arr[202]).toBe(25)
      expect(arr[203]).toBe(4)
      expect(arr[204]).toBe(202)
      expect(arr[205]).toBe(51)
      expect(arr[206]).toBe(94)
      expect(arr[207]).toBe(142)
      expect(arr[208]).toBe(75)
      expect(arr[209]).toBe(178)
      expect(arr[210]).toBe(19)
      expect(arr[211]).toBe(21)
      expect(arr[212]).toBe(211)
      expect(arr[213]).toBe(5)
      expect(arr[214]).toBe(41)
      expect(arr[215]).toBe(204)
      expect(arr[216]).toBe(2)
      expect(arr[217]).toBe(132)
      expect(arr[218]).toBe(14)
      expect(arr[219]).toBe(216)
      expect(arr[220]).toBe(34)
      expect(arr[221]).toBe(144)
      expect(arr[222]).toBe(54)
      expect(arr[223]).toBe(60)
      expect(arr[224]).toBe(27)
      expect(arr[225]).toBe(216)
      expect(arr[226]).toBe(92)
      expect(arr[227]).toBe(81)
      expect(arr[228]).toBe(103)
      expect(arr[229]).toBe(137)
      expect(arr[230]).toBe(90)
      expect(arr[231]).toBe(38)
      expect(arr[232]).toBe(222)
      expect(arr[233]).toBe(83)
      expect(arr[234]).toBe(9)
      expect(arr[235]).toBe(203)
      expect(arr[236]).toBe(170)
      expect(arr[237]).toBe(101)
      expect(arr[238]).toBe(167)
      expect(arr[239]).toBe(158)
      expect(arr[240]).toBe(161)
      expect(arr[241]).toBe(243)
      expect(arr[242]).toBe(168)
      expect(arr[243]).toBe(99)
      expect(arr[244]).toBe(57)
      expect(arr[245]).toBe(150)
      expect(arr[246]).toBe(216)
      expect(arr[247]).toBe(112)
      expect(arr[248]).toBe(212)
      expect(arr[249]).toBe(59)
      expect(arr[250]).toBe(12)
      expect(arr[251]).toBe(255)
      expect(arr[252]).toBe(8)
      expect(arr[253]).toBe(172)
      expect(arr[254]).toBe(82)
      expect(arr[255]).toBe(117)
      expect(arr[256]).toBe(56)
      expect(arr[257]).toBe(51)
      expect(arr[258]).toBe(209)
      expect(arr[259]).toBe(7)
      expect(arr[260]).toBe(176)
      expect(arr[261]).toBe(171)
      expect(arr[262]).toBe(141)
      expect(arr[263]).toBe(210)
      expect(arr[264]).toBe(160)
      expect(arr[265]).toBe(232)
      expect(arr[266]).toBe(19)
      expect(arr[267]).toBe(66)
      expect(arr[268]).toBe(228)
      expect(arr[269]).toBe(246)
      expect(arr[270]).toBe(136)
      expect(arr[271]).toBe(192)
      expect(arr[272]).toBe(224)
      expect(arr[273]).toBe(0)
      expect(arr[274]).toBe(0)

#   it 'can read a frame by spawning a web worker', ->
#     precision = 6
#     fits = arr = null
#     ready = false
#     
#     path = 'data/CFHTLS_03_g_sci.fits.fz'
#     fits = new FITS.File(path, (f) ->
#       dataunit = f.getDataUnit()
#       
#       dataunit.getFrameAsync(0, (array) ->
#         ready = true
#         arr = array
#       )
#     )
#     waitsFor -> return ready
# 
#     runs ->
#       image = fits.getDataUnit()
#       image.getExtent(arr)
#       
#       expect(image.min).toBeCloseTo(-2.981497, precision)
#       expect(image.max).toBeCloseTo(1273.853638, precision)
#       
#       expect(image.getPixel(arr, 0, 0)).toBeCloseTo(0.173962, precision)
#       expect(image.getPixel(arr, 400, 0)).toBeCloseTo(0.347923, precision)
#       expect(image.getPixel(arr, 400, 400)).toBeCloseTo(0.344889, precision)
#       expect(image.getPixel(arr, 0, 400)).toBeCloseTo(1.20711267, precision)
#       
#       # ... and a few other random pixels
#       expect(image.getPixel(arr, 33, 205)).toBeCloseTo(0.975486, precision)
#       expect(image.getPixel(arr, 44, 149)).toBeCloseTo(-0.774174, precision)
#       expect(image.getPixel(arr, 237, 377)).toBeCloseTo(-0.668716, precision)
#       expect(image.getPixel(arr, 393, 27)).toBeCloseTo(0.490127, precision)
